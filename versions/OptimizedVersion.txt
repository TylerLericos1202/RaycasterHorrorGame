//Here is my official version!

#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <vector>
#include <cmath>
#include <iostream>

#define screenWidth 800
#define screenHeight 600
#define texWidth 64
#define texHeight 64

// Define the map
const int mapWidth = 24;
const int mapHeight = 24;

int worldMap[mapWidth][mapHeight] = {
  {8,8,8,8,8,8,8,8,8,8,8,4,4,6,4,4,6,4,6,4,4,4,6,4},
  {8,0,0,0,0,0,0,0,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,4},
  {8,0,3,3,0,0,0,0,0,8,8,4,0,0,0,0,0,0,0,0,0,0,0,6},
  {8,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},
  {8,0,3,3,0,0,0,0,0,8,8,4,0,0,0,0,0,0,0,0,0,0,0,4},
  {8,0,0,0,0,0,0,0,0,0,8,4,0,0,0,0,0,6,6,6,0,6,4,6},
  {8,8,8,8,0,8,8,8,8,8,8,4,4,4,4,4,4,6,0,0,0,0,0,6},
  {7,7,7,7,0,7,7,7,7,0,8,0,8,0,8,0,8,4,0,4,0,6,0,6},
  {7,7,0,0,0,0,0,0,7,8,0,8,0,8,0,8,8,6,0,0,0,0,0,6},
  {7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,6,0,0,0,0,0,4},
  {7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,6,0,6,0,6,0,6},
  {7,7,0,0,0,0,0,0,7,8,0,8,0,8,0,8,8,6,4,6,0,6,6,6},
  {7,7,7,7,0,7,7,7,7,8,8,4,0,6,8,4,8,3,3,3,0,3,3,3},
  {2,2,2,2,0,2,2,2,2,4,6,4,0,0,6,0,6,3,0,0,0,0,0,3},
  {2,2,0,0,0,0,0,2,2,4,0,0,0,0,0,0,4,3,0,0,0,0,0,3},
  {2,0,0,0,0,0,0,0,2,4,0,0,0,0,0,0,4,3,0,0,0,0,0,3},
  {1,0,0,0,0,0,0,0,1,4,4,4,4,4,6,0,6,3,3,0,0,0,3,3},
  {2,0,0,0,0,0,0,0,2,2,2,1,2,2,2,6,6,0,0,5,0,5,0,5},
  {2,2,0,0,0,0,0,2,2,2,0,0,0,2,2,0,5,0,5,0,0,0,5,5},
  {2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,5,0,5,0,5,0,5,0,5},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5},
  {2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,5,0,5,0,5,0,5,0,5},
  {2,2,0,0,0,0,0,2,2,2,0,0,0,2,2,0,5,0,5,0,0,0,5,5},
  {2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,5,5,5,5,5,5,5,5,5}
};

std::vector<sf::Image> loadTextures() {
    std::vector<std::string> textureFiles = {
        "assets/eagle.png",
        "assets/redbrick.png",
        "assets/purplestone.png",
        "assets/greystone.png",
        "assets/bluestone.png",
        "assets/mossy.png",
        "assets/wood.png",
        "assets/colorstone.png"
    };

    std::vector<sf::Image> textures(textureFiles.size());

    for (size_t i = 0; i < textureFiles.size(); ++i) {
        if (!textures[i].loadFromFile(textureFiles[i])) {
            std::cerr << "Failed to load texture: " << textureFiles[i] << std::endl;
            throw std::runtime_error("Texture loading failed");
        }
    }

    return textures;
}

int main() {
    // Create the window
    sf::RenderWindow window(sf::VideoMode(screenWidth, screenHeight), "Raycasting Example");

    // Load textures as sf::Image
    std::vector<sf::Image> textures = loadTextures();

    // Convert sf::Image to sf::Texture for rendering
    std::vector<sf::Texture> textureTextures(8);
    for (int i = 0; i < 8; ++i) {
        textureTextures[i].loadFromImage(textures[i]);
    }
    
    // Player variables
    sf::Vector2f pos(2, 2);  // Player start position
    sf::Vector2f dir(-1, 0); // Initial direction vector
    sf::Vector2f plane(0, 0.66); // 2D raycaster version of camera plane
    
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            // Exit if window is closed or Escape is pressed
            if (event.type == sf::Event::Closed || 
                (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Escape)) {
                window.close();
            }
        }

                // Key events for player movement
        double moveSpeed = 0.1;
        const double rotSpeed = 0.08;
        const double sprintSpeed = 0.15;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) {
            if (!worldMap[int(pos.x + dir.x * moveSpeed)][int(pos.y)]) pos.x += dir.x * moveSpeed;
            if (!worldMap[int(pos.x)][int(pos.y + dir.y * moveSpeed)]) pos.y += dir.y * moveSpeed;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) {
            if (!worldMap[int(pos.x - dir.x * moveSpeed)][int(pos.y)]) pos.x -= dir.x * moveSpeed;
            if (!worldMap[int(pos.x)][int(pos.y - dir.y * moveSpeed)]) pos.y -= dir.y * moveSpeed;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) {
            double oldDirX = dir.x;
            dir.x = dir.x * cos(rotSpeed) - dir.y * sin(rotSpeed);
            dir.y = oldDirX * sin(rotSpeed) + dir.y * cos(rotSpeed);
            double oldPlaneX = plane.x;
            plane.x = plane.x * cos(rotSpeed) - plane.y * sin(rotSpeed);
            plane.y = oldPlaneX * sin(rotSpeed) + plane.y * cos(rotSpeed);
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) {
            double oldDirX = dir.x;
            dir.x = dir.x * cos(-rotSpeed) - dir.y * sin(-rotSpeed);
            dir.y = oldDirX * sin(-rotSpeed) + dir.y * cos(-rotSpeed);
            double oldPlaneX = plane.x;
            plane.x = plane.x * cos(-rotSpeed) - plane.y * sin(-rotSpeed);
            plane.y = oldPlaneX * sin(-rotSpeed) + plane.y * cos(-rotSpeed);
        }
        if(sf::Keyboard::isKeyPressed(sf::Keyboard::LShift)){
            moveSpeed = 1;

        }else{
            moveSpeed = 0.1;
        }

        // Render frame
        window.clear();

        // Render floor and ceiling
        for (int y = screenHeight / 2 + 1; y < screenHeight; ++y) {
            // rayDir for leftmost ray (x = 0) and rightmost ray (x = screenWidth)
            double rayDir0X = dir.x - plane.x;
            double rayDir0Y = dir.y - plane.y;
            double rayDir1X = dir.x + plane.x;
            double rayDir1Y = dir.y + plane.y;

            // Current y position compared to the center of the screen (the horizon)
            int p = y - screenHeight / 2;

            // Vertical position of the camera
            double posZ = 0.5 * screenHeight;

            // Horizontal distance from the camera to the floor for the current row
            double rowDistance = posZ / p;

            // Calculate the real-world step vector we have to add for each x (parallel to camera plane)
            double floorStepX = rowDistance * (rayDir1X - rayDir0X) / screenWidth;
            double floorStepY = rowDistance * (rayDir1Y - rayDir0Y) / screenWidth;

            // Real world coordinates of the leftmost column. This will be updated as we step to the right
            double floorX = pos.x + rowDistance * rayDir0X;
            double floorY = pos.y + rowDistance * rayDir0Y;

            for (int x = 0; x < screenWidth; ++x) {
                // The cell coordinate is simply got from the integer parts of floorX and floorY
                int cellX = int(floorX);
                int cellY = int(floorY);

                // Get the texture coordinate from the fractional part
                int tx = int(texWidth * (floorX - cellX)) & (texWidth - 1);
                int ty = int(texHeight * (floorY - cellY)) & (texHeight - 1);

                floorX += floorStepX;
                floorY += floorStepY;

                // Choose texture and draw the pixel
                int floorTexture = 7;
                int ceilingTexture = 6;

                sf::Color floorColor = textures[floorTexture].getPixel(tx, ty);
                sf::Color ceilingColor = textures[ceilingTexture].getPixel(tx, ty);

                // Draw floor pixel
                sf::Vertex floorPixel(sf::Vector2f(x, y), floorColor);
                // Draw ceiling pixel
                sf::Vertex ceilingPixel(sf::Vector2f(x, screenHeight - y), ceilingColor);

                window.draw(&floorPixel, 1, sf::Points);
                window.draw(&ceilingPixel, 1, sf::Points);
            }
        }

        for (int x = 0; x < screenWidth; ++x) {
            double cameraX = 2 * x / double(screenWidth) - 1; // x-coordinate in camera space
            sf::Vector2f rayDir(dir.x + plane.x * cameraX, dir.y + plane.y * cameraX);

            // Which box of the map we're in
            sf::Vector2i mapPos(int(pos.x), int(pos.y));

            // Length of ray from current position to next x or y-side
            sf::Vector2f sideDist;

            // Length of ray from one x or y-side to next x or y-side
            sf::Vector2f deltaDist(std::abs(1 / rayDir.x), std::abs(1 / rayDir.y));
            double perpWallDist;

            // Direction to go in x and y (+1 or -1)
            sf::Vector2i step;

            bool hit = false; // Was there a wall hit?
            int side;         // Was a NS or a EW wall hit?

            // Calculate step and initial sideDist
            if (rayDir.x < 0) {
                step.x = -1;
                sideDist.x = (pos.x - mapPos.x) * deltaDist.x;
            } else {
                step.x = 1;
                sideDist.x = (mapPos.x + 1.0 - pos.x) * deltaDist.x;
            }
            if (rayDir.y < 0) {
                step.y = -1;
                sideDist.y = (pos.y - mapPos.y) * deltaDist.y;
            } else {
                step.y = 1;
                sideDist.y = (mapPos.y + 1.0 - pos.y) * deltaDist.y;
            }

            // Perform DDA
            while (!hit) {
                // Jump to next map square, OR in x-direction, OR in y-direction
                if (sideDist.x < sideDist.y) {
                    sideDist.x += deltaDist.x;
                    mapPos.x += step.x;
                    side = 0;
                } else {
                    sideDist.y += deltaDist.y;
                    mapPos.y += step.y;
                    side = 1;
                }
                // Check if ray has hit a wall
                if (worldMap[mapPos.x][mapPos.y] > 0) hit = true;
            }

            // Calculate distance projected on camera direction
            if (side == 0) perpWallDist = (mapPos.x - pos.x + (1 - step.x) / 2) / rayDir.x;
            else           perpWallDist = (mapPos.y - pos.y + (1 - step.y) / 2) / rayDir.y;

            // Calculate height of line to draw on screen
            int lineHeight = int(screenHeight / perpWallDist);

            // Calculate lowest and highest pixel to fill in current stripe
            int drawStart = -lineHeight / 2 + screenHeight / 2;
            if (drawStart < 0) drawStart = 0;
            int drawEnd = lineHeight / 2 + screenHeight / 2;
            if (drawEnd >= screenHeight) drawEnd = screenHeight - 1;

            // Calculate texture coordinates once per wall segment
            int texNum = worldMap[mapPos.x][mapPos.y] - 1;
            double wallX;
            if (side == 0) wallX = pos.y + perpWallDist * rayDir.y;
            else wallX = pos.x + perpWallDist * rayDir.x;
            wallX -= floor(wallX);
            int texX = int(wallX * texWidth);
            if (side == 0 && rayDir.x > 0) texX = texWidth - texX - 1;
            if (side == 1 && rayDir.y < 0) texX = texWidth - texX - 1;

            // Calculate texture step once per wall segment
            double texStep = 1.0 * texHeight / lineHeight;
            double texPos = (drawStart - screenHeight / 2 + lineHeight / 2) * texStep;

            // Render the vertical stripe
            sf::VertexArray line(sf::Lines, 2);
            for (int y = drawStart; y < drawEnd; y++) {
                int texY = int(texPos) % texHeight;
                texPos += texStep;
                sf::Color color = textures[texNum].getPixel(texX, texY);
                if (side == 1) color = sf::Color(color.r / 2, color.g / 2, color.b / 2);
                line[0].position = sf::Vector2f(x, y);
                line[0].color = color;
                line[1].position = sf::Vector2f(x, y + 1);
                line[1].color = color;
                window.draw(line);
            }
        }

        // Display the contents of the window
        window.display();

    }

    return 0;
}








