#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <vector>
#include <cmath>
#include <iostream>

#define screenWidth 800
#define screenHeight 600
#define texWidth 64
#define texHeight 64

// Define the map
const int mapWidth = 24;
const int mapHeight = 24;

int worldMap[mapWidth][mapHeight] = {
  {8,8,8,8,8,8,8,8,8,8,8,4,4,6,4,4,6,4,6,4,4,4,6,4},
  {8,0,0,0,0,0,0,0,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,4},
  {8,0,3,3,0,0,0,0,0,8,8,4,0,0,0,0,0,0,0,0,0,0,0,6},
  {8,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},
  {8,0,3,3,0,0,0,0,0,8,8,4,0,0,0,0,0,0,0,0,0,0,0,4},
  {8,0,0,0,0,0,0,0,0,0,8,4,0,0,0,0,0,6,6,6,0,6,4,6},
  {8,8,8,8,0,8,8,8,8,8,8,4,4,4,4,4,4,6,0,0,0,0,0,6},
  {7,7,7,7,0,7,7,7,7,0,8,0,8,0,8,0,8,4,0,4,0,6,0,6},
  {7,7,0,0,0,0,0,0,7,8,0,8,0,8,0,8,8,6,0,0,0,0,0,6},
  {7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,6,0,0,0,0,0,4},
  {7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,6,0,6,0,6,0,6},
  {7,7,0,0,0,0,0,0,7,8,0,8,0,8,0,8,8,6,4,6,0,6,6,6},
  {7,7,7,7,0,7,7,7,7,8,8,4,0,6,8,4,8,3,3,3,0,3,3,3},
  {2,2,2,2,0,2,2,2,2,4,6,4,0,0,6,0,6,3,0,0,0,0,0,3},
  {2,2,0,0,0,0,0,2,2,4,0,0,0,0,0,0,4,3,0,0,0,0,0,3},
  {2,0,0,0,0,0,0,0,2,4,0,0,0,0,0,0,4,3,0,0,0,0,0,3},
  {1,0,0,0,0,0,0,0,1,4,4,4,4,4,6,0,6,3,3,0,0,0,3,3},
  {2,0,0,0,0,0,0,0,2,2,2,1,2,2,2,6,6,0,0,5,0,5,0,5},
  {2,2,0,0,0,0,0,2,2,2,0,0,0,2,2,0,5,0,5,0,0,0,5,5},
  {2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,5,0,5,0,5,0,5,0,5},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5},
  {2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,5,0,5,0,5,0,5,0,5},
  {2,2,0,0,0,0,0,2,2,2,0,0,0,2,2,0,5,0,5,0,0,0,5,5},
  {2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,5,5,5,5,5,5,5,5,5}
};

// Load textures as sf::Image
std::vector<sf::Image> loadTextures() {
    std::vector<sf::Image> textures(8);
    std::vector<std::string> textureFiles = {
        "assets/eagle.png", "assets/redbrick.png", "assets/purplestone.png",
        "assets/greystone.png", "assets/bluestone.png", "assets/mossy.png",
        "assets/wood.png", "assets/colorstone.png"
    };

    for (int i = 0; i < 8; ++i) {
        if (!textures[i].loadFromFile(textureFiles[i])) {
            std::cerr << "Failed to load texture: " << textureFiles[i] << std::endl;
            exit(EXIT_FAILURE);
        }
    }
    return textures;
}

int main() {
    // Create the window
    sf::RenderWindow window(sf::VideoMode(screenWidth, screenHeight), "Raycasting Example");

    // Load textures as sf::Image
    std::vector<sf::Image> textures = loadTextures();

    // Convert sf::Image to sf::Texture for rendering
    std::vector<sf::Texture> textureTextures(8);
    for (int i = 0; i < 8; ++i) {
        textureTextures[i].loadFromImage(textures[i]);
    }
    
    // Player variables
    sf::Vector2f pos(2, 2);  // Player start position
    sf::Vector2f dir(-1, 0); // Initial direction vector
    sf::Vector2f plane(0, 0.66); // 2D raycaster version of camera plane
    
    sf::VertexArray floorCeilingVertices(sf::Points, screenWidth * screenHeight);
    sf::VertexArray wallVertices(sf::Quads, 4 * screenWidth);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            // Exit if window is closed or Escape is pressed
            if (event.type == sf::Event::Closed || 
                (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Escape)) {
                window.close();
            }
        }

        // Key events for player movement
        const double moveSpeed = 0.1;
        const double rotSpeed = 0.03;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) {
            if (!worldMap[int(pos.x + dir.x * moveSpeed)][int(pos.y)]) pos.x += dir.x * moveSpeed;
            if (!worldMap[int(pos.x)][int(pos.y + dir.y * moveSpeed)]) pos.y += dir.y * moveSpeed;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) {
            if (!worldMap[int(pos.x - dir.x * moveSpeed)][int(pos.y)]) pos.x -= dir.x * moveSpeed;
            if (!worldMap[int(pos.x)][int(pos.y - dir.y * moveSpeed)]) pos.y -= dir.y * moveSpeed;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) {
            double oldDirX = dir.x;
            dir.x = dir.x * cos(-rotSpeed) - dir.y * sin(-rotSpeed);
            dir.y = oldDirX * sin(-rotSpeed) + dir.y * cos(-rotSpeed);
            double oldPlaneX = plane.x;
            plane.x = plane.x * cos(-rotSpeed) - plane.y * sin(-rotSpeed);
            plane.y = oldPlaneX * sin(-rotSpeed) + plane.y * cos(-rotSpeed);
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) {
            double oldDirX = dir.x;
            dir.x = dir.x * cos(rotSpeed) - dir.y * sin(rotSpeed);
            dir.y = oldDirX * sin(rotSpeed) + dir.y * cos(rotSpeed);
            double oldPlaneX = plane.x;
            plane.x = plane.x * cos(rotSpeed) - plane.y * sin(rotSpeed);
            plane.y = oldPlaneX * sin(rotSpeed) + plane.y * cos(rotSpeed);
        }

        window.clear();

        // Floor and ceiling rendering
        for (int y = 0; y < screenHeight / 2; ++y) {
            float rayDirX0 = dir.x - plane.x;
            float rayDirY0 = dir.y - plane.y;
            float rayDirX1 = dir.x + plane.x;
            float rayDirY1 = dir.y + plane.y;
            int p = y - screenHeight / 2;
            float posZ = 0.5 * screenHeight;
            float rowDistance = posZ / p;
            float floorStepX = rowDistance * (rayDirX1 - rayDirX0) / screenWidth;
            float floorStepY = rowDistance * (rayDirY1 - rayDirY0) / screenWidth;
            float floorX = pos.x + rowDistance * rayDirX0;
            float floorY = pos.y + rowDistance * rayDirY0;

            for (int x = 0; x < screenWidth; ++x) {
                int cellX = int(floorX);
                int cellY = int(floorY);
                int tx = int(texWidth * (floorX - cellX)) & (texWidth - 1);
                int ty = int(texHeight * (floorY - cellY)) & (texHeight - 1);
                floorX += floorStepX;
                floorY += floorStepY;

                sf::Color floorColor = textures[3].getPixel(tx, ty);
                sf::Color ceilingColor = textures[6].getPixel(tx, ty);

                int pixelIndex = (y * screenWidth) + x;
                floorCeilingVertices[pixelIndex].position = sf::Vector2f(x, y + screenHeight / 2);
                floorCeilingVertices[pixelIndex].color = floorColor;
                floorCeilingVertices[pixelIndex + screenWidth * screenHeight / 2].position = sf::Vector2f(x, screenHeight / 2 - y);
                floorCeilingVertices[pixelIndex + screenWidth * screenHeight / 2].color = ceilingColor;
            }
        }

        window.draw(floorCeilingVertices);

        for (int x = 0; x < screenWidth; ++x) {
            float cameraX = 2 * x / float(screenWidth) - 1;
            float rayDirX = dir.x + plane.x * cameraX;
            float rayDirY = dir.y + plane.y * cameraX;

            int mapX = int(pos.x);
            int mapY = int(pos.y);

            float sideDistX;
            float sideDistY;

            float deltaDistX = (rayDirX == 0) ? 1e30 : std::abs(1 / rayDirX);
            float deltaDistY = (rayDirY == 0) ? 1e30 : std::abs(1 / rayDirY);
            float perpWallDist;

            int stepX, stepY;
            int hit = 0;
            int side;

            if (rayDirX < 0) {
                stepX = -1;
                sideDistX = (pos.x - mapX) * deltaDistX;
            } else {
                stepX = 1;
                sideDistX = (mapX + 1.0 - pos.x) * deltaDistX;
            }
            if (rayDirY < 0) {
                stepY = -1;
                sideDistY = (pos.y - mapY) * deltaDistY;
            } else {
                stepY = 1;
                sideDistY = (mapY + 1.0 - pos.y) * deltaDistY;
            }

            while (hit == 0) {
                if (sideDistX < sideDistY) {
                    sideDistX += deltaDistX;
                    mapX += stepX;
                    side = 0;
                } else {
                    sideDistY += deltaDistY;
                    mapY += stepY;
                    side = 1;
                }
                if (worldMap[mapX][mapY] > 0) hit = 1;
            }

            if (side == 0) perpWallDist = (mapX - pos.x + (1 - stepX) / 2) / rayDirX;
            else perpWallDist = (mapY - pos.y + (1 - stepY) / 2) / rayDirY;

            int lineHeight = (int)(screenHeight / perpWallDist);
            int drawStart = -lineHeight / 2 + screenHeight / 2;
            if (drawStart < 0) drawStart = 0;
            int drawEnd = lineHeight / 2 + screenHeight / 2;
            if (drawEnd >= screenHeight) drawEnd = screenHeight - 1;

            int texNum = worldMap[mapX][mapY] - 1;
            float wallX;
            if (side == 0) wallX = pos.y + perpWallDist * rayDirY;
            else wallX = pos.x + perpWallDist * rayDirX;
            wallX -= floor((wallX));

            int texX = int(wallX * float(texWidth));
            if (side == 0 && rayDirX > 0) texX = texWidth - texX - 1;
            if (side == 1 && rayDirY < 0) texX = texWidth - texX - 1;

            float step = 1.0 * texHeight / lineHeight;
            float texPos = (drawStart - screenHeight / 2 + lineHeight / 2) * step;
            for (int y = drawStart; y < drawEnd; ++y) {
                int texY = (int)texPos & (texHeight - 1);
                texPos += step;
                sf::Color color = textures[texNum].getPixel(texX, texY);
                if (side == 1) color = sf::Color(color.r / 2, color.g / 2, color.b / 2);

                wallVertices[4 * x].position = sf::Vector2f(x, drawStart);
                wallVertices[4 * x + 1].position = sf::Vector2f(x + 1, drawStart);
                wallVertices[4 * x + 2].position = sf::Vector2f(x + 1, drawEnd);
                wallVertices[4 * x + 3].position = sf::Vector2f(x, drawEnd);

                for (int i = 0; i < 4; ++i) {
                    wallVertices[4 * x + i].color = color;
                }
            }
        }

        window.draw(wallVertices);
        window.display();
    }
    return 0;
}
